{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<pre><code>mindmap\n    root((gmail))\n        itsmebishowthapa@\n\n\n            id)itsmebishow(\n\n                (bts-network)\n                (bts-linux)\n                (bts-mobile)\n                (bts-cicd)\n\n        bishowthapa33@\n\n            id)bishow-thapa(\n\n                (bt-frontend)\n                (bt-backend)\n                (bt-projects)\n\n        thedatabaseguide@\n\n            id)thedatabaseguide(\n\n                (db-sql)\n                (db-nosql)\n                (db-baas)\n\n        bishowlovesml@\n\n            id)bishowlovesml(\n\n                (ml-supervised)\n                (ml-unsupervised)\n                (ml-reinenforcement)\n\n        thejsexpert@\n\n            id)thejsexpert(\n\n                (js-reacts)\n                (js-nextjs)\n                (js-typescript)\n                (js-nodejs)\n                (js-testing)\n                (js-js-interviews)</code></pre>"},{"location":"#mkdocs-install-as-app-issue","title":"Mkdocs <code>Install as App</code> Issue","text":"<p>Previous it shows Install App but after i uninstall and now trying to Install as App but it doesn't show me the Install as App option it only show Create shortcut</p> <p>Thanks for the clarification \u2014 this is a common situation with Progressive Web Apps (PWAs) after uninstalling them. Here's why you're seeing only \"Create shortcut\" instead of \"Install app\" now:</p>"},{"location":"#why-install-app-disappeared-after-uninstalling","title":"\ud83d\udd01 Why \"Install App\" disappeared after uninstalling","text":"<p>When you uninstall a PWA (by removing it from the home screen or app drawer), modern browsers \u2014 especially Chrome on Android \u2014 apply a cool-down period. This is meant to prevent users from being annoyed by frequent install prompts.</p> \u26a0\ufe0f What happens: <ul> <li>The browser remembers that you recently uninstalled the app.</li> <li>It suppresses the \"Install App\" option for a period (usually a few days).</li> <li>During this time, only \"Add to home screen\" or \"Create shortcut\" will appear.</li> </ul>"},{"location":"#how-to-solve-it","title":"\u2705 How to solve it","text":"<p>Here are ways to trigger \"Install app\" again:</p> Option 1: Wait <ul> <li>Wait a few days (usually 3\u20137) for the browser to reset its internal state.</li> <li>Visit the site regularly during this time \u2014 this can help Chrome consider it \u201cengaged.\u201d</li> </ul> Option 2: Manually trigger install prompt (developer method) <p>If you're the developer or have access to the site code:</p> <ol> <li> <p>Ensure your site has:</p> <ul> <li> <p>A proper <code>manifest.json</code></p> </li> <li> <p>A service worker registered</p> </li> </ul> </li> <li> <p>Add a custom install button using the <code>beforeinstallprompt</code> event.</p> Example JavaScript:<pre><code>let deferredPrompt;\nwindow.addEventListener(\"beforeinstallprompt\", (e) =&gt; {\n    e.preventDefault();\n    deferredPrompt = e;\n    // Show your custom install button\n    document.getElementById(\"installBtn\").style.display = \"block\";\n\n    document.getElementById(\"installBtn\").addEventListener(\"click\", () =&gt; {\n        deferredPrompt.prompt();\n\n        deferredPrompt.userChoice.then((choiceResult) =&gt; {\n            if (choiceResult.outcome === \"accepted\") {\n                console.log(\"App installed\");\n            } else {\n                console.log(\"User dismissed\");\n            }\n            deferredPrompt = null;\n        });\n    });\n});\n</code></pre> </li> </ol> Option 3: Clear browser data (if acceptable) <p>\u26a0\ufe0f This will reset other sites too:</p> <ul> <li>Go to your mobile browser \u2192 Settings \u2192 Site Settings \u2192 Storage or Cached Data</li> <li>Find your site and clear its data and cache</li> <li>Restart the browser and visit the site again</li> </ul> <p>\u2705 Also check:</p> <ul> <li>Is your site still served over HTTPS?</li> <li>Do you still have a valid <code>manifest.webmanifest</code> and <code>service-worker.js</code>?</li> <li>Test with Chrome <code>DevTools</code> \u2192 <code>Application tab</code> \u2192 See if your PWA is detected</li> </ul> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>gitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit</code></pre> <pre><code>mindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness&lt;br/&gt;and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid</code></pre> <pre><code>timeline\n    title History of Social Media Platform\n    2002 : LinkedIn\n    2004 : Facebook\n         : Google\n    2005 : YouTube\n    2006 : Twitter</code></pre>"},{"location":"#reference","title":"Reference","text":"<ul> <li>techicons.dev</li> <li>A Crash Course in CI/CD</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"docker/overview/","title":"Overview","text":""},{"location":"docker/react-dockerize-locally/","title":"React Dockerize Locally","text":""},{"location":"docker/react-dockerize-locally/#overview","title":"Overview","text":"<p>Creating a Docker image for your React project and running it on your local machine involves several steps. Below is a step-by-step guide to help you containerize your React project using Docker.</p> <p>How to Dockerize a React App and Run it Locally</p>"},{"location":"docker/react-dockerize-locally/#1-install-docker","title":"1. Install Docker","text":"<p>Before you begin, make sure Docker is installed on your machine. If you haven't installed Docker yet, you can download and install it from Docker's official website.</p>"},{"location":"docker/react-dockerize-locally/#2-prepare-your-react-project","title":"2. Prepare your React project","text":"<p>Assuming you already have a React project, you can follow these steps. If you're starting from scratch, you can create a new React app using Create React App.</p> <pre><code>npx create-react-app my-app\ncd my-app\n</code></pre>"},{"location":"docker/react-dockerize-locally/#3-create-a-dockerfile","title":"3. Create a <code>Dockerfile</code>","text":"<p>The <code>Dockerfile</code> is a text file that contains instructions to build a Docker image for your React application. Create a file named <code>Dockerfile</code> (without any extension) in the root of your React project directory.</p> <p>Here is an example of a <code>Dockerfile</code> for a React app:</p> DockerfileExplanation of the Dockerfile: <pre><code># Step 1: Build the React app\nFROM node:18 AS build\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Install dependencies\nCOPY package.json package-lock.json ./\nRUN npm install\n\n# Copy the source code to the container\nCOPY . .\n\n# Build the React app\nRUN npm run build\n\n# Step 2: Serve the React app using Nginx\nFROM nginx:alpine\n\n# Copy the build folder from the previous step to Nginx's html directory\nCOPY --from=build /app/build /usr/share/nginx/html\n\n# Expose the port that Nginx is running on\nEXPOSE 80\n\n# Start the Nginx server\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <p>Step 1 (Build React app):</p> <ul> <li><code>FROM node:18 AS build</code>: Use the official Node.js image as the base for the build stage.</li> <li><code>WORKDIR /app</code>: Set the working directory inside the container.</li> <li><code>COPY package.json package-lock.json ./</code>: Copy the package files to the container.</li> <li><code>RUN npm install</code>: Install dependencies.</li> <li><code>COPY . .</code>: Copy the rest of the project files to the container.</li> <li><code>RUN npm run build</code>: Build the React app (produces static files in the <code>/build</code> directory).</li> </ul> <p>Step 2 (Serve with Nginx):</p> <ul> <li><code>FROM nginx:alpine</code>: Use the official Nginx image for serving the static files.</li> <li><code>COPY --from=build /app/build /usr/share/nginx/html</code>: Copy the built static files from the previous build stage into the Nginx container.</li> <li><code>EXPOSE 80</code>: Expose port 80 so that you can access the app from your browser.</li> <li><code>CMD [\"nginx\", \"-g\", \"daemon off;\"]</code>: Start the Nginx server when the container runs.</li> </ul>"},{"location":"docker/react-dockerize-locally/#4-create-a-dockerignore-file","title":"4. Create a .dockerignore file","text":"<p>A <code>.dockerignore</code> file tells Docker which files and directories to ignore when building the image. Create a <code>.dockerignore</code> file in your project root and add the following:</p> <pre><code>node_modules\nbuild\n.dockerignore\nDockerfile\n.git\n.gitignore\n</code></pre> <p>This will prevent unnecessary files from being included in the Docker image, keeping it smaller and more efficient.</p>"},{"location":"docker/react-dockerize-locally/#5-build-the-docker-image","title":"5. Build the Docker image","text":"<p>Once your <code>Dockerfile</code> and <code>.dockerignore</code> are set up, you can build the Docker image.</p> <p>Open your terminal in the project root directory and run the following command:</p> <pre><code>docker build -t my-react-app .\n</code></pre> <p>This will build the Docker image and tag it as <code>my-react-app</code>. The <code>.</code> refers to the current directory (where the <code>Dockerfile</code> is located).</p>"},{"location":"docker/react-dockerize-locally/#6-run-the-docker-container","title":"6. Run the Docker container","text":"<p>Once the image is built, you can run it using the following command:</p> <pre><code>docker run -p 3000:80 my-react-app\n</code></pre> <p>This will run the container, mapping port 3000 on your local machine to port 80 on the container (where Nginx is serving your app). You can access the app by navigating to http://localhost:3000 in your web browser.</p>"},{"location":"docker/react-dockerize-locally/#7-access-your-react-app","title":"7. Access your React app","text":"<p>After running the container, you should be able to visit http://localhost:3000 in your browser and see your React app running.</p>"},{"location":"docker/react-dockerize-locally/#8-stop-and-remove-the-container","title":"8. Stop and remove the container","text":"<p>To stop the container, you can use the following command:</p> <pre><code>docker stop &lt;container_id&gt;\n</code></pre> <p>You can get the <code>container_id</code> by running:</p> <pre><code>docker ps\n</code></pre> <p>If you want to remove the container after stopping it, use:</p> <pre><code>docker rm &lt;container_id&gt;\n</code></pre>"},{"location":"docker/react-dockerize-locally/#9-optional-push-to-docker-hub-for-sharing","title":"9. Optional: Push to Docker Hub (for sharing)","text":"<p>If you want to share your Docker image, you can push it to Docker Hub. First, create an account on [Docker Hub].</p> <p>To push your image:</p> <ol> <li> <p>Tag your image with your Docker Hub username:</p> <pre><code>docker tag my-react-app your-dockerhub-username/my-react-app\n</code></pre> </li> <li> <p>Log in to Docker Hub:</p> <pre><code>docker login\n</code></pre> </li> <li> <p>Push the image to Docker Hub:</p> <pre><code>docker push your-dockerhub-username/my-react-app\n</code></pre> </li> </ol> Summary of the process: <ul> <li>Create a <code>Dockerfile</code> for building and serving the React app.</li> <li>Build the image using <code>docker build</code>.</li> <li>Run the image in a container with <code>docker run</code>.</li> <li>Access your React app locally through the mapped port.</li> </ul> <p>This process should work seamlessly for most React apps. If you have specific configurations or requirements (e.g., environment variables), you may need to adjust the <code>Dockerfile</code> accordingly.</p>"}]}